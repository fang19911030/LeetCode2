public class Solution {
    /**
     * @param s a string
     * @param wordDict a set of words
     */
    int max = Integer.MIN_VALUE;
    int min = Integer.MAX_VALUE;
    public List<String> wordBreak(String s, Set<String> wordDict) {
        // Write your code here
        List<String> res = new ArrayList<String>();
        if(s == null || s.length()==0 || wordDict==null || wordDict.size()==0){
            return res;
        }
        Map<String,List<String>>[] dp = (Map<String,List<String>>[]) new Map[s.length()];

        for(String str:wordDict){
            max = Math.max(max,str.length());
            min = Math.min(min,str.length());
        }

        for(int i=Math.min(s.length(),max);i>=Math.max(min,1);i--){
            String sub = s.substring(0,0+i);
            if(wordDict.contains(sub)){
                List<String> r = new ArrayList<>();
                List<String> next = dfs(s,wordDict,i,r,sub,dp);
                for(String str:next){
                    res.add(str);
                }
            }
        }
        return res;
    }

    private List<String> dfs(String s, Set<String>wordDict, int index, List<String> res,
                             String cur,Map<String,List<String>>[]dp){
        if(index>=s.length()){
            res.add(cur);
            return res;
        }
        if(dp[index]!= null && dp[index].containsKey(cur)){
            return dp[index].get(cur);
        }
        List<String> r = new ArrayList<>();
        for(int i=Math.min(s.length()-index,max);i>=Math.max(min,1);i--){
            String sub = s.substring(index,index+i);
            if(wordDict.contains(sub)){
                List<String> r2 = new ArrayList<>();
                List<String> next = dfs(s,wordDict,index+i,r2,cur+" "+sub,dp);
                for(String str:next){
                    r.add(str);
                }
            }
        }
        dp[index] = new HashMap<>();
        dp[index].put(cur,r);
        return r;
    }
}